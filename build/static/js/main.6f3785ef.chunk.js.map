{"version":3,"sources":["components/Login.js","components/SignUp.js","App.js","serviceWorker.js","index.js"],"names":["withFormik","mapPropsToValues","props","username","password","validationSchema","Yup","shape","min","max","required","handleSubmit","values","setSubmitting","resetForm","axios","post","then","response","console","log","catch","err","setTimeout","errors","touched","className","type","name","placeholder","disabled","isSubmitting","App","exact","to","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.6f3785ef.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\n\r\nimport './LoginForm.css';\r\n\r\nimport { withFormik, Form, Field } from 'formik';\r\n\r\nconst Login = ({ values, errors, touched }) => {\r\n  // console.log('Submitting', values.isSubmitting);\r\n  return (\r\n    <Form className='formBody'>\r\n      <h1> Login With User and Password </h1>\r\n      <Field\r\n        className='input'\r\n        type='text'\r\n        name='username'\r\n        placeholder='UserName'\r\n      />\r\n      {touched.username && errors.username && (\r\n        <p className='errors'>{errors.username}</p>\r\n      )}\r\n      <Field\r\n        className='input'\r\n        type='password'\r\n        name='password'\r\n        placeholder='Password'\r\n      />\r\n      {touched.password && errors.password && (\r\n        <p className='errors'>{errors.password}</p>\r\n      )}\r\n      <button className='button' type='submit' disabled={values.isSubmitting}>\r\n        {values.isSubmitting ? 'Submitting' : 'Login'}\r\n      </button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default withFormik({\r\n  mapPropsToValues: props => ({\r\n    username: '',\r\n    password: ''\r\n  }),\r\n  validationSchema: Yup.object().shape({\r\n    username: Yup.string()\r\n      .min(2, 'Too Short!')\r\n      .max(70, 'Too Long!')\r\n      .required('UserName is Required!'),\r\n    password: Yup.string()\r\n      .min(6, 'Too Short!')\r\n      .max(70, 'Too Long!')\r\n      .required('Password is Required')\r\n  }),\r\n  handleSubmit: (values, { setSubmitting, resetForm }) => {\r\n    axios\r\n      .post('https://guidr-2.herokuapp.com/api/auth/login', values)\r\n      .then(response => {\r\n        console.log('Data', response);\r\n      })\r\n      .catch(err => console.log(err.response));\r\n\r\n    setTimeout(() => {\r\n      console.log('Entered Value', values);\r\n      setSubmitting(false);\r\n    }, 1000);\r\n    resetForm();\r\n  }\r\n})(Login);\r\n","import React from 'react';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\n\r\nimport './LoginForm.css';\r\n\r\nimport { withFormik, Form, Field } from 'formik';\r\nfunction SignUp({ values, errors, touched }) {\r\n  return (\r\n    <Form className='formBody'>\r\n      <h1> Sign Up to Procceed </h1>\r\n      <Field\r\n        className='input'\r\n        type='text'\r\n        name='username'\r\n        placeholder='UserName'\r\n      />\r\n      {touched.username && errors.username && (\r\n        <p className='errors'>{errors.username}</p>\r\n      )}\r\n      <Field\r\n        className='input'\r\n        type='password'\r\n        name='password'\r\n        placeholder='Password'\r\n      />\r\n      {touched.password && errors.password && (\r\n        <p className='errors'>{errors.password}</p>\r\n      )}\r\n      <button className='button' type='submit' disabled={values.isSubmitting}>\r\n        {values.isSubmitting ? 'SigningUp' : 'Sign Up'}\r\n      </button>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default withFormik({\r\n  mapPropsToValues: props => ({\r\n    username: '',\r\n    password: ''\r\n  }),\r\n  validationSchema: Yup.object().shape({\r\n    username: Yup.string()\r\n      .min(2, 'Too Short!')\r\n      .max(70, 'Too Long!')\r\n      .required('UserName is Required!'),\r\n    password: Yup.string()\r\n      .min(6, 'Too Short!')\r\n      .max(70, 'Too Long!')\r\n      .required('Password is Required')\r\n  }),\r\n  handleSubmit: (values, { setSubmitting, resetForm }) => {\r\n    axios\r\n      .post('https://guidr-2.herokuapp.com/api/auth/register', values)\r\n      .then(response => {\r\n        console.log('Data', response);\r\n      })\r\n      .catch(err => console.log(err.response));\r\n\r\n    setTimeout(() => {\r\n      console.log('Entered Value', values);\r\n      setSubmitting(false);\r\n    }, 1000);\r\n    resetForm();\r\n  }\r\n})(SignUp);\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Login from './components/Login';\r\nimport SignUp from './components/SignUp';\r\nimport { Route, Link } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  return (\r\n\r\n    <div className='App'>\r\n      <p>\r\n        <Link exact to='/'>\r\n          Home\r\n        </Link>\r\n      </p>\r\n\r\n      <li>\r\n        <Link to='/Login'>Login</Link>\r\n      </li>\r\n      <li>\r\n        <Link to='/SignUp'>Sign Up</Link>\r\n      </li>\r\n\r\n      <Route path='/login'>\r\n        <Login />\r\n      </Route>\r\n      <Route path='/SignUp'>\r\n        <SignUp />\r\n      </Route>\r\n      {/* <Login /> */}\r\n      {/* <SignUp /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}